// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    email,
    hashed_password,
    phone,
    otp,
    is_blocked,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, first_name, last_name, email, hashed_password, phone, otp, is_blocked, created_at, updated_at
`

type CreateUserParams struct {
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	Email          string         `json:"email"`
	HashedPassword string         `json:"hashed_password"`
	Phone          int32          `json:"phone"`
	Otp            sql.NullString `json:"otp"`
	IsBlocked      sql.NullBool   `json:"is_blocked"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
		arg.Phone,
		arg.Otp,
		arg.IsBlocked,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.Otp,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id $1
`

func (q *Queries) DeleteUser(ctx context.Context, dollar_1 interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteUser, dollar_1)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, hashed_password, phone, otp, is_blocked, created_at, updated_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.Otp,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, hashed_password, phone, otp, is_blocked, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.HashedPassword,
			&i.Phone,
			&i.Otp,
			&i.IsBlocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    first_name = $1,
    last_name = $2,
    hashed_password = $3,
    phone = $4,
    otp = $5,
    is_blocked = $6,
    updated_at = $7
WHERE id = $8 RETURNING id, first_name, last_name, email, hashed_password, phone, otp, is_blocked, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	HashedPassword string         `json:"hashed_password"`
	Phone          int32          `json:"phone"`
	Otp            sql.NullString `json:"otp"`
	IsBlocked      sql.NullBool   `json:"is_blocked"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	ID             int32          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.HashedPassword,
		arg.Phone,
		arg.Otp,
		arg.IsBlocked,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.Otp,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
