// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: admins.sql

package db

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (
    first_name,
    last_name,
    email,
    hashed_password,
    phone,
    is_admin
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, first_name, last_name, email, hashed_password, phone, is_admin
`

type CreateAdminParams struct {
	FirstName      string       `json:"first_name"`
	LastName       string       `json:"last_name"`
	Email          string       `json:"email"`
	HashedPassword string       `json:"hashed_password"`
	Phone          int32        `json:"phone"`
	IsAdmin        sql.NullBool `json:"is_admin"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
		arg.Phone,
		arg.IsAdmin,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.IsAdmin,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins WHERE id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdminByID = `-- name: GetAdminByID :one
SELECT id, first_name, last_name, email, hashed_password, phone, is_admin FROM admins 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdminByID(ctx context.Context, id int32) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByID, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.IsAdmin,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, first_name, last_name, email, hashed_password, phone, is_admin FROM admins
`

func (q *Queries) ListAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Admin{}
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.HashedPassword,
			&i.Phone,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :one
UPDATE admins SET
    first_name = $1,
    last_name = $2,
    email = $3,
    hashed_password = $4,
    phone = $5,
    is_admin = $6
WHERE id = $7 RETURNING id, first_name, last_name, email, hashed_password, phone, is_admin
`

type UpdateAdminParams struct {
	FirstName      string       `json:"first_name"`
	LastName       string       `json:"last_name"`
	Email          string       `json:"email"`
	HashedPassword string       `json:"hashed_password"`
	Phone          int32        `json:"phone"`
	IsAdmin        sql.NullBool `json:"is_admin"`
	ID             int32        `json:"id"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, updateAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
		arg.Phone,
		arg.IsAdmin,
		arg.ID,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.IsAdmin,
	)
	return i, err
}
